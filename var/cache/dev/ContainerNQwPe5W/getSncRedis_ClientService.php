<?php

namespace ContainerNQwPe5W;


use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getSncRedis_ClientService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'snc_redis.client' shared service.
     *
     * @return \Redis
     */
    public static function do($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['snc_redis.client'] = $container->createProxy('RedisProxy1d553d7', static fn () => \RedisProxy1d553d7::createLazyProxy(static fn () => self::do($container, false)));
        }

        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'snc'.\DIRECTORY_SEPARATOR.'redis-bundle'.\DIRECTORY_SEPARATOR.'src'.\DIRECTORY_SEPARATOR.'Factory'.\DIRECTORY_SEPARATOR.'PhpredisClientFactory.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'snc'.\DIRECTORY_SEPARATOR.'redis-bundle'.\DIRECTORY_SEPARATOR.'src'.\DIRECTORY_SEPARATOR.'Logger'.\DIRECTORY_SEPARATOR.'RedisCallInterceptor.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'friendsofphp'.\DIRECTORY_SEPARATOR.'proxy-manager-lts'.\DIRECTORY_SEPARATOR.'src'.\DIRECTORY_SEPARATOR.'ProxyManager'.\DIRECTORY_SEPARATOR.'Configuration.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'friendsofphp'.\DIRECTORY_SEPARATOR.'proxy-manager-lts'.\DIRECTORY_SEPARATOR.'src'.\DIRECTORY_SEPARATOR.'ProxyManager'.\DIRECTORY_SEPARATOR.'GeneratorStrategy'.\DIRECTORY_SEPARATOR.'GeneratorStrategyInterface.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'friendsofphp'.\DIRECTORY_SEPARATOR.'proxy-manager-lts'.\DIRECTORY_SEPARATOR.'src'.\DIRECTORY_SEPARATOR.'ProxyManager'.\DIRECTORY_SEPARATOR.'GeneratorStrategy'.\DIRECTORY_SEPARATOR.'FileWriterGeneratorStrategy.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'friendsofphp'.\DIRECTORY_SEPARATOR.'proxy-manager-lts'.\DIRECTORY_SEPARATOR.'src'.\DIRECTORY_SEPARATOR.'ProxyManager'.\DIRECTORY_SEPARATOR.'FileLocator'.\DIRECTORY_SEPARATOR.'FileLocatorInterface.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'friendsofphp'.\DIRECTORY_SEPARATOR.'proxy-manager-lts'.\DIRECTORY_SEPARATOR.'src'.\DIRECTORY_SEPARATOR.'ProxyManager'.\DIRECTORY_SEPARATOR.'FileLocator'.\DIRECTORY_SEPARATOR.'FileLocator.php';

        $a = new \ProxyManager\Configuration();
        $a->setGeneratorStrategy(new \ProxyManager\GeneratorStrategy\FileWriterGeneratorStrategy(new \ProxyManager\FileLocator\FileLocator($container->targetDir.'')));
        $a->setProxiesTargetDir($container->targetDir.'');

        return (new \Snc\RedisBundle\Factory\PhpredisClientFactory(new \Snc\RedisBundle\Logger\RedisCallInterceptor(($container->privates['snc_redis.logger'] ?? self::getSncRedis_LoggerService($container)), ($container->services['debug.stopwatch'] ??= new \Symfony\Component\Stopwatch\Stopwatch(true))), $a))->create('Redis', [$container->getEnv('REDIS_URL')], ['connection_async' => false, 'connection_persistent' => false, 'connection_timeout' => 5, 'read_write_timeout' => NULL, 'iterable_multibulk' => false, 'throw_errors' => true, 'serialization' => 'default', 'cluster' => NULL, 'prefix' => NULL, 'service' => NULL], 'client', true);
    }
}
